<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[穷小子Agger的技术博客]]></title>
  <link href="http://agger0207.github.io/atom.xml" rel="self"/>
  <link href="http://agger0207.github.io/"/>
  <updated>2016-01-01T14:06:36+08:00</updated>
  <id>http://agger0207.github.io/</id>
  <author>
    <name><![CDATA[Agger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在两台机器上同时用octopress写博客的问题]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/zai-liang-tai-ji-qi-shang-tong-shi-yong-octopressxie-bo-ke-de-wen-ti/"/>
    <updated>2016-01-01T13:37:15+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/zai-liang-tai-ji-qi-shang-tong-shi-yong-octopressxie-bo-ke-de-wen-ti</id>
    <content type="html"><![CDATA[<p>问题描述:
之前是在晚上在公司机器上来发布文章，但是同时也会在自己家里写文章，我们知道，octopress日常操作的实际就是blog所在的git仓库的source分支，例如我自己的blog对应的仓库实际上就是<code>https://github.com/agger0207/agger0207.github.io</code>, 平时写好文章后提交到git上，保持同步就好了。</p>

<p>今天在家里执行<code>rake deploy</code>的时候就发现报错了；错误信息与解决过程看下面.</p>

<p>错误1:</p>

<pre><code>## Deploying branch to Github Pages 
## Pulling any updates from Github Pages 
cd _deploy
rake aborted!
Errno::ENOENT: No such file or directory @ dir_chdir - _deploy
</code></pre>

<p>提示是找不到<code>_deploy</code>文件夹，看了下，还真没有，感情自己一直没在家里的机器上deploy过，搜索了下，如果有不同的本地仓库的时候就会存在这种问题，执行如下命令，就会生成_deploy文件夹啦!</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>错误2：</p>

<p>继续<code>rake deploy</code>, 继续报错：</p>

<pre><code>On branch master
nothing to commit, working directory clean

## Pushing generated _deploy website
To https://github.com/agger0207/agger0207.github.io
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/agger0207/agger0207.github.io'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>错误提示是说无法向自己博客所在远程仓库的<code>master</code>分支push, 因为当前本地的版本没有更新到最新版本. 了解git的同学都知道，要push到远程分支，首先需要将最新的改动pull下来，否则不让提交的。而octopress实际发布的过程实际上就是会将本地的改动push到blog所在git仓库的master分支(也就是我们日常通过编写markdown文档的过程其实并不是直接去改动blog的呈现，而是在改动后，通过<code>rake generate</code>生成网页，然后deploy的时候将生成的页面信息push到远程的master分支上).</p>

<p>google了一下，原来<code>_deploy</code>文件夹下的内容就是从<code>master</code>分支下取下来的内容，大家可以看下，<code>_deploy</code>目录下的是不是正好和github上<code>master</code>分支一样呢？</p>

<p>执行命令:</p>

<pre><code>$ cd _deploy
$ ls -a 
</code></pre>

<p>可以看到结果：</p>

<pre><code>.       assets      favicon.png javascripts sitemap.xml
..      atom.xml    images      posts       stylesheets
.git        blog        index.html  robots.txt  
</code></pre>

<p>.git的存在证明了这就是一个本地的git仓库嘛；</p>

<p>剩下的就好办了，只需要与master同步即可：</p>

<pre><code>$ git pull origin master    
</code></pre>

<p>pull失败，提示有冲突，不要紧，执行下面的命令恢复到和master分支一样就可以了，反正这里面的内容都是自动生成的.</p>

<pre><code>$ git reset --hard origin/master
</code></pre>

<p>然后搞定，回到上一层目录，执行<code>rake deploy</code>就OK.</p>

<p>小结：
解决下来，发现这个问题其实还蛮有意思的；原来<code>_deploy</code>文件夹就是对应的git repo的master branch。其实octopress的这些操作核心就是ruby和git; 如果没有猜错，之前解决<code>_deploy</code>文件夹不存在时所执行的命令就是创建一个本地的仓库并且设置对应的remote url, 不过我对ruby不太熟，要不然可以研究下里面的rakefile确认一下。而octopress对于git仓库的处理就是，编辑的内容对应的是source branch, 而<code>_deploy</code>对应master branch, 和git submodule有点类似，只不过子文件夹下对应的remote repo是同一个repo的不同branch,  而git submodule一般都是不同的submodule放在不同的仓库下。</p>

<p>参考资料：</p>

<ul>
<li><a href="https://github.com/imathis/octopress/issues/334">No such file or directory - _deploy</a></li>
<li><a href="http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github">Octopress pushing error to GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发博客与网站]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhe-bo-ke/"/>
    <updated>2015-11-30T16:05:03+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhe-bo-ke</id>
    <content type="html"><![CDATA[<p>值得一看的iOS开发者博客:</p>

<p>推荐的文章：</p>

<p>InfoQ: 可以订阅一下</p>

<p>CocoaChina: 文章多，但是好文章不够，可以订阅一下；</p>

<p>订阅的一些微信公众号：</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Pop使用指南（翻译）]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/facebook-popshi-yong-zhi-nan-(fan-yi-)/"/>
    <updated>2015-11-30T16:03:28+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/facebook-popshi-yong-zhi-nan-(fan-yi-)</id>
    <content type="html"><![CDATA[<p>原文链接：</p>

<p><a href="https://github.com/maxmyers/FacebookPop">maxmyers/FacebookPop</a></p>

<h1>使用Facebook Pop库的五个步骤</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>  <span class="c1">// 1. 选择一种动画类型 </span>
</span><span class='line'>  <span class="c1">// 存在如下几种动画类型: POPBasicAnimation  POPSpringAnimation POPDecayAnimation</span>
</span><span class='line'>  <span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. 决定你是要针对View的属性做动画还是Layer的属性做动画, 这里我们选择一个View的属性kPOPViewFrame, 顾名思义，这是针对View的Frame变化做动画</span>
</span><span class='line'>  <span class="c1">// View的属性包括： kPOPViewAlpha kPOPViewBackgroundColor kPOPViewBounds kPOPViewCenter kPOPViewFrame kPOPViewScaleXY kPOPViewSize</span>
</span><span class='line'>  <span class="c1">// Layer的属性包括 - kPOPLayerBackgroundColor kPOPLayerBounds kPOPLayerScaleXY kPOPLayerSize kPOPLayerOpacity kPOPLayerPosition kPOPLayerPositionX kPOPLayerPositionY kPOPLayerRotation kPOPLayerBackgroundColor</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewFrame</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. 确定使用下面其中一种方法来设置toValue</span>
</span><span class='line'>   <span class="c1">//  anim.toValue = @(1.0);</span>
</span><span class='line'>  <span class="c1">//  anim.toValue =  [NSValue valueWithCGRect:CGRectMake(0, 0, 400, 400)];</span>
</span><span class='line'>  <span class="c1">//  anim.toValue =  [NSValue valueWithCGSize:CGSizeMake(40, 40)];</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">190</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. 为动画创建名字以及设置Delegate</span>
</span><span class='line'>   <span class="n">basicAnimation</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">@&quot;AnyAnimationNameYouWant&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">basicAnimation</span><span class="p">.</span><span class="n">delegate</span><span class="o">=</span><span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 5. 将动画附加到View或者Layer, 这里我们选择self.tableView</span>
</span><span class='line'>  <span class="c1">// 如果我们之前设置的是针对Layer的属性，那么我们可以选择一个Layer例如self.tableView.layer</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">pop_addAnimation</span><span class="p">:</span><span class="n">basicAnimation</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;WhatEverNameYouWant&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第一步 选择一种动画类型</h2>

<h3>POPBasicAnimation （基本动画）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">timingFunction</span><span class="o">=</span><span class="p">[</span><span class="bp">CAMediaTimingFunction</span> <span class="nl">functionWithName</span><span class="p">:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">];</span>
</span><span class='line'><span class="c1">// kCAMediaTimingFunctionLinear  kCAMediaTimingFunctionEaseIn  kCAMediaTimingFunctionEaseOut  kCAMediaTimingFunctionEaseInEaseOut</span>
</span></code></pre></td></tr></table></div></figure>


<h3>POPSpringAnimation (弹簧动画)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">springAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">springAnimation</span><span class="p">.</span><span class="n">velocity</span><span class="o">=</span><span class="l">@(</span><span class="mi">1000</span><span class="l">)</span><span class="p">;</span>       <span class="c1">// change of value units per second</span>
</span><span class='line'><span class="n">springAnimation</span><span class="p">.</span><span class="n">springBounciness</span><span class="o">=</span><span class="mi">14</span><span class="p">;</span>    <span class="c1">// value between 0-20 default at 4</span>
</span><span class='line'><span class="n">springAnimation</span><span class="p">.</span><span class="n">springSpeed</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span>     <span class="c1">// value between 0-20 default at 4</span>
</span></code></pre></td></tr></table></div></figure>


<h3>POPDecayAnimation  (衰减动画)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPDecayAnimation</span> <span class="o">*</span><span class="n">decayAnimation</span><span class="o">=</span><span class="p">[</span><span class="n">POPDecayAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">decayAnimation</span><span class="p">.</span><span class="n">velocity</span><span class="o">=</span><span class="l">@(</span><span class="mi">233</span><span class="l">)</span><span class="p">;</span> <span class="c1">//change of value units per second</span>
</span><span class='line'><span class="n">decayAnimation</span><span class="p">.</span><span class="n">deceleration</span><span class="o">=</span><span class="mf">.833</span><span class="p">;</span> <span class="c1">//range of 0 to 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>例如</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 2 选择是需要在view的属性上做动画还是Layer的属性上做动画</h2>

<h3>View 的属性</h3>

<p>下列枚举值与UIView的属性对应, 例如 alpha, color, bounds, center, frame, size等等;</p>

<h5>Alpha - kPOPViewAlpha</h5>

<h5>Color - kPOPViewBackgroundColor</h5>

<h5>Size - kPOPViewBounds</h5>

<h5>Center - kPOPViewCenter</h5>

<h5>Location &amp; Size - kPOPViewFrame</h5>

<h5>Size - kPOPViewScaleXY</h5>

<h5>Size(Scale) - kPOPViewSize</h5>

<h3>Layer的属性</h3>

<p>下列枚举值与CALayer的属性对应，例如opaque等等</p>

<h5>Color - kPOPLayerBackgroundColor</h5>

<h5>Size - kPOPLayerBounds</h5>

<h5>Size - kPOPLayerScaleXY</h5>

<h5>Size - kPOPLayerSize</h5>

<h5>Opacity - kPOPLayerOpacity</h5>

<h5>Position - kPOPLayerPosition</h5>

<h5>X Position - kPOPLayerPositionX</h5>

<h5>Y Position - kPOPLayerPositionY</h5>

<h5>Rotation - kPOPLayerRotation</h5>

<h5>Color - kPOPLayerBackgroundColor</h5>

<h3>例如</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 选择在View的Frame属性上应用动画</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewFrame</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注意: 这些属性在任意的Layer属性或者UIView的属性上都可以生效，例如 UIToolbar | UIPickerView | UIDatePicker | UIScrollView |  UITextView | UIImageView | UITableViewCell | UIStepper | UIProgressView | UIActivityIndicatorView | UISwitch | UISlider | UITextField | UISegmentedControl | UIButton | UIView | UITableView</h4>

<p>(意思是：可以对任意UIView的子类以及其layer应用动画)</p>

<h2>Step 3 Find your property below then add and set .toValue</h2>

<h3>View Properties</h3>

<h5>Alpha - kPOPViewAlpha</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewAlpha</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="l">@(</span><span class="mi">0</span><span class="l">)</span><span class="p">;</span> <span class="c1">// scale from 0 to 1</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Color - kPOPViewBackgroundColor</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPViewBackgroundColor</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size - kPOPViewBounds</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewBounds</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">190</span><span class="p">)];</span> <span class="c1">//first 2 values dont matter</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Center - kPOPViewCenter</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewCenter</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGPoint</span><span class="p">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Location &amp; Size - kPOPViewFrame</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewFrame</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mi">140</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size - kPOPViewScaleXY</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewScaleXY</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGSize</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size(Scale) - kPOPViewSize</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewSize</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGSize</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Layer Properties</h3>

<h5>Color - kPOPLayerBackgroundColor</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerBackgroundColor</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size - kPOPLayerBounds</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerBounds</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">90</span><span class="p">)];</span> <span class="c1">//first 2 values dont matter</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size - kPOPLayerScaleXY</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerScaleXY</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGSize</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)];</span><span class="c1">//increases width and height scales</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Size - kPOPLayerSize</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPBasicAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPBasicAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPLayerSize</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGSize</span><span class="p">:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Opacity - kPOPLayerOpacity</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerOpacity</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="l">@(</span><span class="mi">0</span><span class="l">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Position - kPOPLayerPosition</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerPosition</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">130</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span><span class="c1">//last 2 values dont matter</span>
</span></code></pre></td></tr></table></div></figure>


<h5>X Position - kPOPLayerPositionX</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerPositionX</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="l">@(</span><span class="mi">240</span><span class="l">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Y Position - kPOPLayerPositionY</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">anim</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">property</span><span class="o">=</span><span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPLayerPositionY</span><span class="p">];</span>
</span><span class='line'><span class="n">anim</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="l">@(</span><span class="mi">320</span><span class="l">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Rotation - kPOPLayerRotation</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerRotation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="l">@(</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">4</span><span class="l">)</span><span class="p">;</span> <span class="c1">//2 M_PI is an entire rotation</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Note: Property Changes work for all 3 animation types - POPBasicAnimation POPSpringAnimation POPDecayAnimation</h4>

<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span> <span class="n">kPOPLayerRotation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span> <span class="l">@(</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">4</span><span class="l">)</span><span class="p">;</span> <span class="c1">//2 M_PI is an entire rotation</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 4 Create Name &amp; Delegate For Animation</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">@&quot;WhatEverAnimationNameYouWant&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">delegate</span><span class="o">=</span><span class="nb">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Declare Delegate Protocol <code>&lt;POPAnimatorDelegate&gt;</code></h5>

<h3>Delegate Methods</h3>

<p><code>
&lt;POPAnimatorDelegate&gt;
</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pop_animationDidStart:</span><span class="p">(</span><span class="n">POPAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anim</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pop_animationDidStop:</span><span class="p">(</span><span class="n">POPAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anim</span> <span class="nf">finished:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">finished</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pop_animationDidReachToValue:</span><span class="p">(</span><span class="n">POPAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anim</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewFrame</span><span class="p">];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">190</span><span class="p">)];</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">@&quot;WhatEverAnimationNameYouWant&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">basicAnimation</span><span class="p">.</span><span class="n">delegate</span><span class="o">=</span><span class="nb">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 5 向view添加动画</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">pop_addAnimation</span><span class="p">:</span><span class="n">basicAnimation</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;WhatEverNameYouWant&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'>  <span class="n">POPSpringAnimation</span> <span class="o">*</span><span class="n">basicAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPSpringAnimation</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">property</span> <span class="o">=</span> <span class="p">[</span><span class="n">POPAnimatableProperty</span> <span class="nl">propertyWithName</span><span class="p">:</span><span class="n">kPOPViewFrame</span><span class="p">];</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">toValue</span><span class="o">=</span><span class="p">[</span><span class="bp">NSValue</span> <span class="nl">valueWithCGRect</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">190</span><span class="p">)];</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">@&quot;SomeAnimationNameYouChoose&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">basicAnimation</span><span class="p">.</span><span class="n">delegate</span><span class="o">=</span><span class="nb">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">pop_addAnimation</span><span class="p">:</span><span class="n">basicAnimation</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;WhatEverNameYouWant&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发文章选读 之 第三周]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/ioskai-fa-wen-zhang-xuan-du-zhi-di-san-zhou/"/>
    <updated>2015-11-30T16:02:44+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/ioskai-fa-wen-zhang-xuan-du-zhi-di-san-zhou</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发 之 界面布局]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-jie-mian-bu-ju/"/>
    <updated>2015-11-30T15:17:05+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-jie-mian-bu-ju</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发 之 动画]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-dong-hua/"/>
    <updated>2015-11-30T15:16:54+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-dong-hua</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ioskai Fa Zhi Shu Ju Chi Jiu Hua Cun Chu]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-shu-ju-chi-jiu-hua-cun-chu/"/>
    <updated>2015-11-30T00:00:00+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/30/ioskai-fa-zhi-shu-ju-chi-jiu-hua-cun-chu</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;iOS开发 之 数据持久化存储&rdquo;
date: 2015-11-30 15:17:31 +0800
comments: true</p>

<h2>categories: </h2>

<p>如果只是想设置默认值而不覆盖用户设置的值，那么可以通过<code>registerDefaults</code>来做.</p>

<p>NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
[standardDefaults registerDefaults:@{@&ldquo;favoriteColor&rdquo;: @&ldquo;Green&rdquo;}];
[standardDefaults synchronize];
每次程序启动的时候调用registerDefaults: 方法都是安全的。完全可以将这个方法的调用放到applicationDidFinishLaunching:方法中. 这个方法永远都不会覆盖用户设置的值。</p>

<p>NSUserDefaults是线程安全的，苹果官方文档有明确说明<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/index.html">The NSUserDefaults class is thread-safe.</a></p>

<p><a href="http://stackoverflow.com/questions/10864482/is-nsuserdefault-thread-safe">McZonk关于is NSUserDefault thread-safe的回答</a>有提到，</p>

<pre><code>Speaking for 10.10 and iOS8 if you looking into the implementation you'll find that -[NSUserDefaults setObject:forKey:] is calling __CFPreferencesSetAppValueWithContainer, which will eventually end up in +[CFPrefsSource withSourceForIdentifier:user:byHost:container:perform:]. This method is using a pthread_mutex_t to lock the access to the dictionary containing the values.
</code></pre>

<p>所以内部访问的时候是有加锁保护，所以是线程安全的.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa操作符介绍]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/reactivecocoacao-zuo-fu-jie-shao/"/>
    <updated>2015-11-27T17:02:50+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/reactivecocoacao-zuo-fu-jie-shao</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown编辑技巧]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/markdownbian-ji-ji-qiao/"/>
    <updated>2015-11-27T14:37:53+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/markdownbian-ji-ji-qiao</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作经历回忆 之 快速性能改进]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/gong-zuo-jing-li-hui-yi-zhi-kuai-su-xing-neng-gai-jin/"/>
    <updated>2015-11-27T14:37:29+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/gong-zuo-jing-li-hui-yi-zhi-kuai-su-xing-neng-gai-jin</id>
    <content type="html"><![CDATA[<p>最近唐巧老师在他的个人博客上开始普及算法相关知识，其中提到熟悉算法和数据结构知识能够帮助我们更好的评估性能问题所在，能够认识到问题的规模对于实际性能的影响，并且举了一个由于问题的规模太小根本就不需要做算法改进的例子，这个我倒是有些体会，也见过一些将代码写得难看加不安全仅仅自以为可以提升性能的做法（比如去掉空指针的判断以为减少了性能开销，其实性能没有节省多少但是带来了crash的风险）；加上自己以前也做过一些性能优化方面的工作，能够很好的认识到，性能优化并不等同于算法优化，所以想回忆一些之前做的一些性能改进的实例，也算是对自己过往工作的一个总结。由于我其实一直是做客户端相关的工作，所以涉及到算法比较少，这些优化经验大部分也和算法优化关系不大, 或者说，这是在介绍自己如何在不改进算法的基础上做的一些性能改进，其实想法都比较简单。</p>

<h2>一 多线程改进数据备份还原性能</h2>

<p>问题描述：做磁盘/文件数据备份，性能慢
一般误解：由于一般过程是，读取数据&ndash;>压缩&ndash;>写入目标文件；所以想到可能是改进压缩算法
实际解决：性能太慢其实仅仅是因为所有的操作都是在一条线程中完成的，即使不压缩，也足够慢呀；所以改进策略就是采用多线程的解决方案，读，压缩，并行即可；无论对于文件备份还是磁盘备份都适合；
进一步优化：
1）多线程压缩；并行后压缩成为真正的瓶颈所在，那么这个时候就可以提高压缩性能了；而比换一个压缩算法更好的方式是，同时用多个线程进行的数据压缩；
2）对部分文件避免压缩：如果是做文件备份，对于图片、视频数据，压缩得不偿失，压缩率低，压缩时间长，不压缩就好了
3）读写线程改善；对同一块磁盘的读写并行，不仅不会提高性能，反而会降低性能；而对不同磁盘的读写并行，是可以提高性能的</p>

<h2>二 遍历磁盘文件树的性能改进</h2>

<p>问题描述：做某个分区的文件备份，需要建立分区的文件树，然后看这些文件是否需要备份，并且需要和已备份的文件树比较，来支持增量备份等一系列的功能；
改进方案：
1 递归改非递归；
如果使用者不分区，那么一个分区里面十几万的文件很正常，这个时候递归遍历并且比较的时候，函数调用会有很多额外的开销，所以仅仅是递归改非递归就可以大大提高这部分性能；
2 避免多次遍历与多次比较；（这个其实是原来的代码写得有问题^_^)
3 利用文件系统的特性：
Windows上有个很火的工具，叫做Everything, 号称是速度最快的文件名搜索工具；其实就是因为在NTFS系统下，所有文件目录和文件的meta信息都存放在一个叫做MFT文件里面，只需要获取到这里面的信息，就可以快速获取到NTFS分区里面的文件树信息了，是不是快了很多？</p>

<p>还有一些，时间久远，不太想得起来了，后面慢慢加 :)</p>

<h2>三 随机存取备份文件改进文件提取性能</h2>

<p>问题描述：需要从磁盘备份数据里面找到某个文件然后还原出来。。。
之前的版本：从备份文件里面展示出所有文件大概需要一个多小时，然后找到这个文件后还原，大概需要两个小时，而且内存和CPU都占满了
原因：之前是不支持随机存取，然后要展示所有的文件，差不多需要把整个磁盘备份解压缩一遍，然后找到文件还原的时候需要解压缩两遍，囧。。。
改进：以NTFS文件系统为例啦，有个MFT(Master File Table)文件，它里面每一项呢，都代表一个文件，然后MFT呢，本身也是一个特殊的文件，其实大家可以把它想象成为一本书的目录啦，只不过有个特殊的是，这个目录(MFT)的内容，并不是固定在某一个区域里的，而是可能分散在分区的任何一处的。所以之前的做法相当于是，先把整本书翻了一遍，然后将目录信息取出来了；然后找到某个文件的时候呢，又把整本书翻了一遍找到某个文件对应的目录信息，然后呢，再把整本书翻了一遍取到这个文件的信息。忘了说了，NTFS文件系统的特殊性还包括，这个文件的后半部分在磁盘上的位置可能更前，这样的话，可能还得从头把这本书翻一遍。
解决方案：其实就是允许随机存取备份生成的文件；对备份前的磁盘分块，通过改进文件格式，在已备份信息中记录类似MFT的信息，例如，所有待备份的都以2MB的大小分块，那么只要能够从备份生成的文件中快速找到要还原的文件是分布在哪些2MB块里面，就可以找到这些信息在备份文件里的偏移量，只需要解压缩这部分数据就可以了。比如说，先取目录信息(MFT)的时候，只需要取这个MFT文件对应的offset的内容进行解压缩，甚至可以做到，只取第一层目录；然后每个文件都能够找到它的对应内容处在备份文件的哪一块，再也不需要从头开始解压缩了。</p>

<p>其实，上面这些基本上都不需要什么特殊的算法知识，很多时候都是具体分析瓶颈在那里，尤其是在数据规模大的时候；而常见的性能改进方法，无非就是多线程、缓存、随机存取等等。</p>

<p>待续&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让人崩溃的bug]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/rang-ren-beng-kui-de-bug/"/>
    <updated>2015-11-27T14:36:39+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/rang-ren-beng-kui-de-bug</id>
    <content type="html"><![CDATA[<h2>一 iOS使用不规范造成的首页白屏</h2>

<p>WebView页面被遮挡，然后被Remove掉的时候，页面内容没有渲染出来</p>

<h2>二 人家的bug</h2>

<p>H5页面的bug, iOS开发工程师来帮忙调, 最怕的是Android还没问题(其实是Andorid也有问题，负负得正)</p>

<h2>三 人家的bug: Andorid内存溢出</h2>

<h2>四 花费时间最长的两个bug</h2>

<p>1 磁盘还原后某个文件内容不正确
2 磁盘还原后系统无法启动</p>

<h2>五 多线程</h2>

<p>多线程永远都是最头痛的问题, 死锁，Crash等等</p>

<h2>六 按键精灵</h2>

<h2>七 无法重现</h2>

<h2>八 客户报过来的</h2>

<p>有dump就不怕:)</p>

<p>之前CodeProject上有文章介绍在VC 6.0下如何根据crash日志定位到具体的代码行，在VS2010下其实也可用，不过有的时候对应不到代码行，只能到函数，这个时候，函数写的短小精悍的好处就出来了：）</p>

<h2>九 内存泄漏</h2>

<h2>十 已经改好了</h2>

<p>总结：代码Review, 静态代码分析，XCode Instruments能够很好的避免bug的出现;</p>

<p>待完善 （年纪大了，很多都已经不记得了，不过iOS相对来说更简单一些，至少多线程的问题少很多；代码量相对比较少也可以通过代码比对的方式来修正错误；一般如果是自己团队开发造成的bug都可以通过规范代码的方式来避免，除非crash在系统控件内部且无法重现）</p>

<p>吐槽：很多开发同学只要不是自己负责代码的bug就一概忽略；自己重现不了的bug一概忽略；其实，很多稍微调试一下或者稍微看看代码就能够知道问题所在；或者搜索下错误信息；或者搜索下最近代码改动；或者看下相关功能的代码；绝大部分都能够定位到原因；少数不能定位到具体原因，也能够限制在少部分代码块中，而这部分代码块如果写法规范点，基本上就没啥问题了。
当然，我也遇到过不靠谱的测试，由于网络问题的原因，中国这边无法测试，然后对方测试后给出个bug, 就只有一个出错界面，操作步骤和日志也没有，而且还经常把记录好的错误日志清除掉，再也重现不了。。。。</p>

<p>当然，不排除部分问题确实很难查。对于出现的问题，我总记得之前的架构师说过的一句话：“Let me debug it !”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的工作经历]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/wo-de-gong-zuo-jing-li/"/>
    <updated>2015-11-27T14:36:21+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/wo-de-gong-zuo-jing-li</id>
    <content type="html"><![CDATA[<p>主要想回忆一些自己工作的感受、经历，做一下总结，随便写写总比什么都不写好，毕竟年纪慢慢大了，记忆力慢慢衰退了，说不定哪一天就不记得自己干过什么了呢：）尽量多正面的回忆，少吐槽，当然，也不是写简历，要写简历直接去拉勾了：）</p>

<p>先列提纲，再慢慢写吧！</p>

<h2>一 Arcsoft</h2>

<p>系统架构部门软件工程师</p>

<h2>二 Nero</h2>

<p>Nero BackItUp架构师</p>

<h2>三 挖财</h2>

<p>资深iOS开发工程师</p>

<h2>四 网易</h2>

<p>资深客户端开发工程师</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日常积累的开发技巧（一）]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/ri-chang-ji-lei-de-kai-fa-ji-qiao-(%5B%3F%5D-)/"/>
    <updated>2015-11-27T14:35:06+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/ri-chang-ji-lei-de-kai-fa-ji-qiao-([?]-)</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 7免费真机调试]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/xcode-7mian-fei-zhen-ji-diao-shi/"/>
    <updated>2015-11-27T14:33:55+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/xcode-7mian-fei-zhen-ji-diao-shi</id>
    <content type="html"><![CDATA[<p>现在Xcode 7可以免费进行真机调试了，不需要任何开发者账号，只要有一个Apple ID就可以了。</p>

<p>主要步骤如下：
1 运行Xcode后，点击菜单中的Preferences, 进行Account标签，选择添加Apple Id
2 输入AppId，登录；登录成功后会看到相关信息；
3 选中账号信息，点击View Details, 在弹出的对话框中操作添加开发者证书
4 打开要调试的项目，在Target的General的Team中可以看到刚才添加的Apple Id
5 连上设备调试前可以看到Team旁有一个Issue, 点击Fix，profile就生成并且添加到项目中了
6 可以到原来设置profile和证书的地方看看，一切都设置好了。然后就可以运行调试并且安装到真机上了。</p>

<p>全程傻瓜式操作；晚点上图：）</p>

<p>不过会不会有什么坑暂时还不知道，等遇到了再更新；至少现在是用得好好的，不需要开发者账号也可以愉快的真机调试.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些我问过的、答过的、见过的iOS面试题（一）]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/na-xie-wo-wen-guo-de-,-da-guo-de-,-jian-guo-de-iosmian-shi-ti-(%5B%3F%5D-)/"/>
    <updated>2015-11-27T14:33:18+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/na-xie-wo-wen-guo-de-,-da-guo-de-,-jian-guo-de-iosmian-shi-ti-([?]-)</id>
    <content type="html"><![CDATA[<p>网上现在流传不少iOS面试题以及解答，再加上自己也整理过一些面试题给组里的人去做校招和社招的面试，正好列在下面，逐步完善和补充；有些还是我被人面试的时候回答过的，由简单到难慢慢列着吧.</p>

<h2>一 Objective-C属性关键字</h2>

<p>常见问题：
1 有哪些属性关键字，各自的作用是什么？
2 strong和weak的区别
3 weak，assign的区别
4 strong/retain和copy的区别
5 什么情况下需要用copy?
6 IBOutlet属性里面用weak, 如果用strong会有问题吗？如果有，会有什么问题？
7 默认的属性关键字，尤其是针对内存管理上的默认属性关键字
8 readonly有什么作用？
9 使用atomic会有什么负面影响? atomic修饰属性后，一定是线程安全的吗？如果atomic修饰的是NSMutableArray呢？
10 delegate为什么要用weak来修饰？如果用assign修饰的话会有问题吗？如何避免这一问题？
11 深拷贝与浅拷贝相关</p>

<p>一般挑几个大致问下就差不多了，遇到过好些不知道weak和assign的区别&hellip;.
话说我一般不问getter和setter。。。。</p>

<h2>二 基本知识</h2>

<p>1 protocol是什么？可以定义property吗？如果可以，那么怎么做或者有什么需要注意的地方？
2 category是什么？主要有什么作用？在什么情况下会考虑用到category?category可以替换掉原有的实现吗？写category需要注意些什么（比如命名上）？Category可以定义property吗？如果可以，那么怎么做？Category可以为类增加成员变量吗？</p>

<h2>三 内存管理</h2>

<p>1 内存管理机制
2 循环引用的理解，遇到过哪些循环引用，如何解决
3 AutoReleasePool的原理，放入AutoReleasePool中的对象会在什么时候真正释放，什么情况下需要手写AutoReleasePool块
4 MRC转到ARC后需要注意的一些问题，在哪些情况下需要自己去做一些资源释放的问题
5 CF对象的Release问题相关</p>

<h2>四 不分类了</h2>

<p>发现好难分类，不分类了，一顺写下来吧！</p>

<p>1 View Controller的生命周期; loadView会在哪个过程中被调用到？viewWillLayoutSubviews和viewDidLayoutSubviews又会在哪个过程中被调用到？从A页面调到B页面，各自的ViewController中哪些方法会被调用到？
如果是iOS 6以前就开始做了的，那么会问下UIViewDidUnload相关的问题，比如为什么现在UIViewDidUnload不需要处理了.
2 Application的生命周期；一般需要做哪些处理；在各个阶段的回调处理时需要注意什么，比如，是否可以在启动的回调中做一些耗时操作等等;
3 APNS基本流程；应用需要做哪些处理
4 SetNeedsDisplay是做什么用的？drawRect呢？setNeedsLayout呢？</p>

<p>待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开源库 之 Sample Code]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/ioskai-yuan-ku-zhi-sample-code/"/>
    <updated>2015-11-27T14:31:44+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/ioskai-yuan-ku-zhi-sample-code</id>
    <content type="html"><![CDATA[<h2>一 使用Facebook的pop做的一些动画示例</h2>

<p>1 <a href="https://github.com/schneiderandre/popping">schneiderandre/popping</a></p>

<p>github地址：<a href="https://github.com/schneiderandre/popping">https://github.com/schneiderandre/popping</a>       <br/>
说明：A collection of animation examples for iOS apps.</p>

<p>2 <a href="https://github.com/victorBaro/PopPlayground">victorBaro/PopPlayground</a>                        <br/>
github地址：<a href="https://github.com/victorBaro/PopPlayground">https://github.com/victorBaro/PopPlayground</a>       <br/>
说明：Examples and Controls made entirely using Pop (Facebook&rsquo;s framework)</p>

<p>3 <a href="https://github.com/callmeed/pop-playground">callmeed/pop-playground</a>     <br/>
github地址：<a href="https://github.com/callmeed/pop-playground">https://github.com/callmeed/pop-playground</a>
说明：Some example animations using Facebook&rsquo;s Pop animation library</p>

<h2>二 针对iOS 7, 8, 9新特性的Sample Code</h2>

<p>作者都是同一个人：）</p>

<p><a href="https://github.com/shu223/iOS-9-Sampler">iOS-9-Sampler</a>                      <br/>
<a href="https://github.com/shu223/iOS8-Sampler">iOS-8-Sampler</a>                       <br/>
<a href="https://github.com/shu223/iOS7-Sampler">iOS-7-Sampler</a></p>

<h2>三 SuperDemo</h2>

<p><a href="https://github.com/bingxue314159/SuperDemo">bingxue314159/SuperDemo</a>            <br/>
该作者平时积累的一些第三方库和控件使用方法.</p>

<p>暂时只留意到这些，后续有找到新的会陆续添加；这些Sample Code对于快速理解新特性或者一些开源库还是很有帮助的，当然，首先还是要看下苹果官方或者第三方开源库作者自己提供的Demo啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开源库 之 网络请求]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/ioskai-yuan-ku-zhi-wang-luo-qing-qiu/"/>
    <updated>2015-11-27T14:31:27+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/ioskai-yuan-ku-zhi-wang-luo-qing-qiu</id>
    <content type="html"><![CDATA[<p>iOS一般都是HTTP/HTTPS网络请求，相应的有多个开源库来支持iOS客户端HTTP请求; 比较知名和常用的主要有如下几个：</p>

<h2>一 ASIHttpRequest</h2>

<p>比较老的开源网络库，现在已经不再维护了；ASIHttpRequest基于CFNetworking而不是NSURLConnection, 所以性能会更好；功能上会比AFNetworking更强大，但是使用起来不如AFNetworking那么方便，而且对于新的iOS版本没有提供支持；现在应该还有一些比较老的项目仍然在使用。</p>

<p>项目地址：<a href="https://github.com/pokeb/asi-http-request">https://github.com/pokeb/asi-http-request</a></p>

<p>ASI VS AFNetworking是之前大家经常讨论的话题，而且确实在支持的功能上也有一些不同，比如ASI支持同步请求，支持自定义Proxy设置(AFNetworking在iOS 7.0之前不支持),不过随着ASI不再维护，慢慢的也就没有这个比较了，可以参看下面的文章了解二者的差异.</p>

<p><a href="http://www.infoq.com/cn/articles/afn_vs_asi">对比iOS网络组件：AFNetworking VS ASIHTTPRequest</a></p>

<h2>二 AFNetworking</h2>

<p>github地址：<a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a></p>

<p>现在知名度最高、应用最广泛的开源网络库，使用起来非常简单；接口清晰明了；此外，还有很多在此基础上做的扩展，后面提到的RestKit和YTKNetworking其实下面都是在用AFNetworking做请求的发送；事实上，现存的绝大多数APP中，如果仅仅是支持HTTP协议的话，除了自己用苹果的API(NSURLSession或者NSURLConnection)外，基本就是用AFNetworking了.</p>

<p>AFNetworking现在到了3.0版本，3.0版本去除了NSURLConnection那套接口，只有NSURLSession的接口，只支持iOS 7以上；
另外，作者还开发了Swift版本<a href="https://github.com/Alamofire/Alamofire">Alamofire</a>. 可以查看RayWenderlich提供的教程<a href="http://www.raywenderlich.com/85080/beginning-alamofire-tutorial">alamofire-tutorial</a>或者该教程的翻译版本<a href="http://www.cocoachina.com/ios/20141202/10390.html">Alamofire网络库基础教程：使用 Alamofire 轻松实现 Swift 网络请求</a>获得更多信息.</p>

<p>AFNetworking本身也是很值得学习的库，里面对于NSOperation的使用、网络请求相关的处理都很值得学习，这里有一篇关于AFNetworking源码解读的文章:<a href="http://blog.cnbang.net/tech/2320/">AFNetworking2.0源码解析</a>，不过并没有涉及到NSURLSession部分。
另外，由于AFNetworking的作者Mattt Thompson本身是<a href="http://nshipster.com">NSHipter</a>的发起人，所以也可以看作者自己写的介绍文章<a href="http://nshipster.cn/afnetworking-2/">AFNetworking 2.0</a>，体会架构的优化与了解功能的变更. 另附<a href="http://nshipster.cn/">NSHipter中文版本</a>.</p>

<p>各个大版本的变迁：
<a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-3.0-Migration-Guide">AFNetworking 3.0 Migration Guide</a></p>

<p><a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide">AFNetworking 2.0 Migration Guide</a></p>

<h2>三 RestKit</h2>

<p>项目地址：<a href="https://github.com/RestKit/RestKit">https://github.com/RestKit/RestKit</a></p>

<p>RestKit is a modern Objective-C framework for implementing RESTful web services clients on iOS and Mac OS X. It provides a powerful object mapping engine that seamlessly integrates with Core Data and a simple set of networking primitives for mapping HTTP requests and responses built on top of AFNetworking.</p>

<p>RestKit主要是在网络请求的发送之外额外提供了对象映射的功能，可以将服务器返回的结果(无论是JSON还是XML)自动映射成为Model对象，并且集成了CoreData的支持；它利用RequestDescriptor和ResponseDescriptor来描述请求与Model的对应关系，这样对于配置好后的RKObjectManager, 可以自动的对请求的结果进行映射；所以其强大之处就在于这个对象的映射功能，避免繁杂的JSON映射啊什么的.</p>

<p>不过好像RestKit在国内的应用不多，我个人觉得是有这么几个原因：
1 RestKit底下其实还是用AFNetworking来发送请求，而且还使用的是老的AFNetworking 1.x的版本；由于其与AFNetworking耦合比较紧，替换成为AFNetworking 2.x以上版本非常麻烦；RestKit的开发者本来计划是要升级到AFNetworking 2.x的，不过弄了一两年也没搞完，现在的方向貌似是直接抛弃AFNetworking，直接自己通过NSURLSession来发送网络请求，但是具体啥时候能够做完就不知道了；
2 RestKit的设计、实现和使用都偏复杂，很多地方都会看到对这一点的抱怨；对于中小型应用，AFNetworking + Mantle 完全可以做掉 RestKit的工作，还更简单；想单独的替换/升级Mantle或者AFNetworking都方便很多；
3 国内好像CoreData用得应该不太多，RestKit强大的ObjectMapping+CoreData的集成没有多少用武之地.
4 中小型项目用RestKit嫌麻烦，大型项目要用RestKit倒是好，但是一般这种级别的项目或者公司都会希望能够集成自己的私有TCP协议，这个要集成起来也够头疼.</p>

<p>我个人也不是太喜欢RestKit, 还是AFNetworking + Mantle会更简单，即使要支持Object Mapping, 在一些JSON&lt;>Model转换库的基础上做做也还好，毕竟，大多数时候，不需要考虑一些奇怪的JSON返回内容，可以约束服务器开发人员返回更友好更易快速解析的JSON内容，而不是一些不规范的、异构的内容.</p>

<h2>四 MKNetworkKit</h2>

<p>Github地址：<a href="https://github.com/MugunthKumar/MKNetworkKit">https://github.com/MugunthKumar/MKNetworkKit</a>
介绍文章：<a href="http://www.cnblogs.com/scorpiozj/p/3222803.html">http://www.cnblogs.com/scorpiozj/p/3222803.html</a>
License:MIT License</p>

<p>主要特性：
超轻量级
整个应用共享单一队列
正确的显示网络连接的标志
Auto queue sizing 自动队列大小
Auto caching 自动缓存
Operation freezing 操作冻结
Image Caching 图片缓存
Performance 性能
Full support for Objective-C ARC 全面支持Ojbective-C ARC</p>

<p>个人感觉
1 功能偏简单；库本身的设计上感觉没有什么特别的；主要就是封装了一个Operation和一个调度的Engine; Engine中涉及一些配置和调度；
2 使用的时候需要自己去写MKNetworkEngine的子类; 当然，一个应用一般是访问同一个服务器，所以只需要在同一个Engine类中开放不同的API接口；每个接口里面去创建一个MKNetworkOperation;
3 一般来说，不需要子类化MKNetworkOperation类
4 创建MKNetworkOperation时参数要自己组装；所以实际使用的时候，还是需要在这之上封装一个网络层出来；
5 坦白说，MKNetworkKit的代码风格都比较差，包括空行和空格什么的，可读性不那么好，没有其他几个知名库那样赏心悦目.</p>

<h2>五 YTKNetwork</h2>

<p>YTKNetwork 是猿题库 iOS 研发团队基于 AFNetworking 封装的 iOS 网络库，其实现了一套 High Level 的 API，提供了更高层次的网络访问抽象。
项目地址: <a href="https://github.com/yuantiku/YTKNetwork">https://github.com/yuantiku/YTKNetwork</a></p>

<p>总体还是基于AFNetworking 2.x的，做了一些上层封装，集成了Cache功能，让网络层请求写起来更加简单。我觉得大多数情况下，使用这个库足够了，方便又清晰.</p>

<p>不过，我觉得实际使用的过程中，要是能够加上JSON-Model的映射功能，使用起来会更爽；另外，这套请求还是基于AFNetworking 2.x老的那套接口，也就是AFURLSessionManager那一套，底下还是NSURLConnection, 估计后面也会迁移到AFNetworking 3.x上使用NSURLSession吧！</p>

<p>另外，安居客的作者貌似也开源过一套网络库的上层封装，大致思想和YTKNetwork差不太多，我没有细看，据说用起来也很Happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Store审核拒绝理由]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/app-storeshen-he-ju-jue-li-you/"/>
    <updated>2015-11-27T14:28:17+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/app-storeshen-he-ju-jue-li-you</id>
    <content type="html"><![CDATA[<p>这几天在ASO100的微信公众号上看到<a href="%E5%9C%B0%E5%9D%80%E6%89%BE%E4%B8%8D%E5%88%B0">2015年App Store审核被拒的23个理由</a>, 觉得也可以分享一下自己所了解到的一些被拒绝的理由；有些是自己经历过，有些是别的团队经历过或者讲述的。</p>

<p>1 App中出现安卓字样；一般是活动页面；
2 App中活动页面奖品中出现iPhone等；
3 App中活动页面没有返回按钮；
这个问题出现的原因是，活动页面一般使用H5来做，然后有的H5带了Header, 有的没有带；客户端通过URL参数来判断是否要加导航栏头部，然后万一运营上了个活动页面，自己没有带H5 Header, 配置又不正确的话，就悲剧了；
4 应用内提供了检查更新机制；
吐槽：话说尽管苹果审核指南明确规定了所有应用都应该通过AppStore更新，但其实很多应用都在设置页面提供了检查更新的机制，然后在2015年的某一天，突然这个就成为了被拒的理由了，即使同样的功能已经存在一年多了。。。。
5 推荐其他应用
别家的应用是一定不能推荐的，自家的应用不清楚，不过我看大家基本都在推，好像问题不太大。
6 求好评
具体不记得了，一般在设置页面放一栏是没啥问题的，但是好像某种弹出界面以比较强的提示要求给好评的话，会过不了审核
7 彩票类栏目没有提供用户协议
嗯，这个也是一个某个功能存在了很久，突然就因为这个被拒了。。。。
8 提供用户注册功能的应用必须提供隐私协议
同上，之前好好的过审，苹果艳照门之后就一定要提供隐私协议了
9 社区模块没有提供举报功能
吐槽：不说啥，社区水很深，据说社区里面的帖子里面要是有“安卓”字样都可能被拒
10 在status bar上显示自己的信息
吐槽：这个是听兄弟部门的哥们说的，以前大家都会在status bar上显示一些提示信息，比如说下载进度、同步进度或者active状态下收到的push消息等等，但是兄弟部门的哥们说iOS 9之后，不让加了，因为这个被拒了一次，据说是因为status bar上苹果自己要在那上面显示信息了。。。
11 非用户创造的数据没有放在/tmp下也没有打上do not back up属性，会被拒，因为苹果认为只有用户创造的数据才允许被iCloud backup备份
可以参见下面两个链接：
<a href="https://developer.apple.com/library/ios/qa/qa1719/_index.html">https://developer.apple.com/library/ios/qa/qa1719/_index.html</a>
<a href="https://developer.apple.com/icloud/documentation/data-storage/index.html">https://developer.apple.com/icloud/documentation/data-storage/index.html</a></p>

<p>上次其他组因为这个原因被拒是因为下载的H5资源包放在Documents目录下没有加do not back up属性.</p>

<p>12 H5资源包升级的时候卡住界面了&hellip;.
其实是个bug, 不过也提醒我们，这种资源包升级的事情明显可以在审核过程中避免或者在测试过程中出现的，应该尽早处理掉.</p>

<p>有些想不起来了，想起来了后面再加：）</p>

<p>小结：
1 审核期间运营上活动一定要注意沟通，一般运营都不明白审核规则，有些甚至上了活动之后自己都不会去测试；当然，有些公司会直接在后台做一些配置确保当前递交版本不会出现新的活动页面；
2 可能因为网络原因导致出错的主要功能要在审核前格外注意.</p>

<p>当然，你还可以在<a href="https://github.com/jcccn/Why-Reject">苹果审核拒绝理由</a> 下面看到更多奇葩理由。</p>

<p>为了保证审核通过，还是要仔细研究苹果官方的审核指南，不过其实大家很多时候都没有严格按照审核指南来做，很多时候甚至是想一些办法来绕过审核的。苹果的审核由于是人工审核，有的时候也会有一些奇葩的事情发生，经常会出现多年不修改的功能，突然某个版本就过不了审核了；尤其是在苹果发布新版本的Xcode，iOS或者出了一些隐私泄漏的大事的时候，审核都会收紧。</p>

<p>建议新产品第一次上线前，有专人能够根据审核规则进行一次详细的Review, 这样大家能够形成共识，避免下次出现问题, 至少不会把未完成的功能加上去或者说出现“敬请期待”等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa新的依赖管理工具 Carthage]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage/"/>
    <updated>2015-11-27T14:27:51+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage</id>
    <content type="html"><![CDATA[<p>之前只知道使用git submodule和CocoaPods来做包的依赖管理，前段时间看一个开源库的时候，不记得是Mantle还是MagicRecord的时候发现ReadMe里面有介绍可以用Carthage来做包的依赖管理。</p>

<p>不过根据ReadMe中说明，只支持动态框架，所以只能用于iOS 8以及以后.</p>

<pre><code>Note that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).
</code></pre>

<p>github地址：</p>

<p><a href="https://github.com/Carthage/Carthage">https://github.com/Carthage/Carthage</a></p>

<p>由于自己主要还是在用Cocoapods和git submodule，所以还是推荐两篇文章自己去看吧，也算是给自己的一个备忘:</p>

<p><a href="http://www.infoq.com/cn/news/2015/05/carthage-dependency-manager">Carthage：Xcode项目的GitHub依赖管理器</a>
<a href="http://www.isaced.com/post-265.html">Cocoa 新的依赖管理工具：Carthage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodule基本使用方法]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/git-submoduleji-ben-shi-yong-fang-fa/"/>
    <updated>2015-11-27T14:27:11+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/git-submoduleji-ben-shi-yong-fang-fa</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
