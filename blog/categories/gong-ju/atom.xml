<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工具 | 穷小子Agger的技术博客]]></title>
  <link href="http://agger0207.github.io/blog/categories/gong-ju/atom.xml" rel="self"/>
  <link href="http://agger0207.github.io/"/>
  <updated>2016-01-01T19:05:56+08:00</updated>
  <id>http://agger0207.github.io/</id>
  <author>
    <name><![CDATA[Agger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[修改git Commit历史]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/xiu-gai-git-commitli-shi/"/>
    <updated>2016-01-01T18:27:46+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/xiu-gai-git-commitli-shi</id>
    <content type="html"><![CDATA[<p>例如，一个需求是，之前递交的时候本地设置的email地址都错了，那么需要把之前所有的提交的电子邮件地址改过来，也就是批量修改commit历史，而<code>git commit --amend</code>命令只能修改最近的一次提交，这个时候就可以用到git filter-branch命令了，示例如下：</p>

<pre><code>$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "xxx@xxx.com" ];
        then
                GIT_AUTHOR_NAME="agger0207";
                GIT_AUTHOR_EMAIL="agger0207@users.noreply.github.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
</code></pre>

<p>如果之前执行过一次，会报错，说无法backup之类，原因是会再一次rewrite .git目录下的<code>refs/original/</code>, 这时加个参数<code>-f</code>强制执行即可：</p>

<pre><code>git filter-branch -f --commit-filter '
            if [ "$GIT_AUTHOR_EMAIL" = "xxx@xxx.com" ];
            then
                    GIT_AUTHOR_NAME="agger0207";
                    GIT_AUTHOR_EMAIL="agger0207@users.noreply.github.com";
                    git commit-tree "$@";
            else
                    git commit-tree "$@";
            fi' HEAD
</code></pre>

<p>同理，也可以删除某个作者或者email地址对应的历史commit:</p>

<pre><code>git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "xxx@xxx.com" ];
        then
                skip_commit "$@";
        else
                git commit-tree "$@";
        fi' HEAD
</code></pre>

<p>如何判断某个提交是从哪个地址或者作者提交呢? github在自己的帮助文档<a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/">check the email address used for a commit</a>里明确提到，在commit对应的url下加上.patch就会显示递交的作者信息了，例如, 通过url<code>https://github.com/octocat/octocat.github.io/commit/67c0afc1da354d8571f51b6f0af8f2794117fd10.patch</code>就可以得到<code>octocat.github.io</code>这个rep的commit<code>67c0afc1da354d8571f51b6f0af8f2794117fd10</code>的提交信息如下:</p>

<pre><code>From 67c0afc1da354d8571f51b6f0af8f2794117fd10 Mon Sep 17 00:00:00 2001
From: The Octocat &lt;octocat@nowhere.com&gt;
Date: Sun, 27 Apr 2014 15:36:39 +0530
Subject: [PATCH] updated index for better welcome message
</code></pre>

<p>我实践的时候，前面进行的都很顺利，但是提交的时候<code>git push</code>会报错，git会认为有分支的发散，但是我试着先<code>git pull</code>在<code>git push</code>的话发现后来是多了很多commit而不是直接覆盖掉原有的commit; 后来尝试直接<code>git push -f</code>强制覆盖，貌似可以解决问题。然后看参考链接中的<a href="https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html">git-filter-branch(1) Manual Page</a>也提到，除非清楚的知道要做什么，否则谨慎使用git filter-branch, 因为无法安全的push, 原文如下：</p>

<pre><code>WARNING! The rewritten history will have different object names for all the objects and will not converge with the original branch. You will not be able to easily push and distribute the rewritten branch on top of the original branch. Please do not use this command if you do not know the full implications, and avoid using it anyway, if a simple single commit would suffice to fix your problem. (See the "RECOVERING FROM UPSTREAM REBASE" section in git-rebase(1) for further information about rewriting published history.)

Always verify that the rewritten version is correct: The original refs, if different from the rewritten ones, will be stored in the namespace refs/original/.
</code></pre>

<h2>参考资料</h2>

<ul>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">Git 工具 - 重写历史</a></li>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html">git-filter-branch(1) Manual Page</a></li>
<li><a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/">check the email address used for a commit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何创建自己的私有Pod Spec Repo]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/ru-he-chuang-jian-zi-ji-de-si-you-pod-spec-repo/"/>
    <updated>2016-01-01T14:10:19+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/ru-he-chuang-jian-zi-ji-de-si-you-pod-spec-repo</id>
    <content type="html"><![CDATA[<p>晕，发现文章在公司写了没传到github上；假期结束后去公司发好了；其实很简单，直接看官网文章<a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a>就可以了，另外有一篇中文文章写得更细致点。</p>

<p>提一句，CocoaPods Spec Repo的核心也就是一个github仓库<a href="https://github.com/CocoaPods/Specs">CocoaPods/Specs</a>, 然后这里面的所有内容就是各个开源库提交过来的Specs信息，<code>pod setup</code>的时候会将这个仓库clone到本地；为什么我们经常说在国内，<code>pod update</code>的时候非常慢，主要就是因为需要将本地的spec repo和github上做一个同步，而这个repo由于里面的文件非常多，更新也多，所以以国内的网速，同步起来非常非常慢，我试过将这个仓库一次性全clone到本地，要一个多小时。。。。所以一般大家在<code>pod update</code>的时候会加上参数<code>--no-repo-update</code>避免重新去同步这个仓库。</p>

<p>而所谓的创建私有Pod Spec Repo或者说创建一个新的Repo镜像，本质都是维护一个github的仓库，这个仓库里面放的就是这些spec了</p>

<p>话说创建好自己的私有Pod Spec Repo后，添加原有的那些内部用的podspec的时候，无一例外都报错，囧。。。。看来得花时间好好review这些podspec啦 ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github上Contributions丢失的问题]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/githubshang-contributionsdiu-shi-de-wen-ti/"/>
    <updated>2016-01-01T14:09:54+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/githubshang-contributionsdiu-shi-de-wen-ti</id>
    <content type="html"><![CDATA[<p>前几天无意中瞟了一眼自己的github, 虽然自己都怎么向github上提交代码，但是contributions明显不对，中间空了好几个月，再仔细看看，发现提交上去的作者都链接不到自己的profile, google一下答案就找到了，因为自己机器重做后忘记设置git 的user email了，而github是通过user email来对应到实际的用户的；解决这个问题一般通过命令</p>

<pre><code>$ git config --global user.email "xxxx@xxxx.com"
</code></pre>

<p>其中的email地址需要和自己github profile的email地址一样;</p>

<p>而如果希望不在commit中暴露自己的email地址的话，可以用如下命令</p>

<pre><code>$ git config --global user.email "username@users.noreply.github.com"
</code></pre>

<p>其中<code>username</code>是自己的github用户明名，这样既可以同自己的profile关联起来，自己在profile中将email地址不对外开放的话，别人也看到你的email地址。</p>

<p>但是<code>git config --global</code>这个命令是全局生效的，也就是所有git的提交都会使用这个email, 如果自己还使用了另外一个email提交代码，比如说一般公司内网都会搭建gitbucket之类，自己同时还在内网提交代码，那么所用的账户对应的email可能是不一样的，那么就需要对具体某个local repo来设置email了，命令如下：</p>

<pre><code>$ git config --local user.email "username@users.noreply.github.com"
</code></pre>

<p>这样就可以对当前的repo设置一个email, 在当前repo下所有commit都会和这个email关联起来，其实这样也挺麻烦的，按道理说应该可以配置得更加智能些，毕竟这些config信息都是存在配置文件上的，改天自己实践过后再来更新这篇文章吧！话说我发现我的某个分支好像又是存在问题的，commit的作者显示不正确，看来改天又要去检查下啦。。。。</p>

<p>参考资料:</p>

<ul>
<li><a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/">Why are my contributions not showing up on my profile?</a></li>
<li><a href="https://help.github.com/articles/keeping-your-email-address-private/">Keeping your email address private</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa新的依赖管理工具 Carthage]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage/"/>
    <updated>2015-11-27T14:27:51+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage</id>
    <content type="html"><![CDATA[<p>之前只知道使用git submodule和CocoaPods来做包的依赖管理，前段时间看一个开源库的时候，不记得是Mantle还是MagicRecord的时候发现ReadMe里面有介绍可以用Carthage来做包的依赖管理。</p>

<p>不过根据ReadMe中说明，只支持动态框架，所以只能用于iOS 8以及以后.</p>

<pre><code>Note that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).
</code></pre>

<p>github地址：</p>

<p><a href="https://github.com/Carthage/Carthage">https://github.com/Carthage/Carthage</a></p>

<p>由于自己主要还是在用Cocoapods和git submodule，所以还是推荐两篇文章自己去看吧，也算是给自己的一个备忘:</p>

<p><a href="http://www.infoq.com/cn/news/2015/05/carthage-dependency-manager">Carthage：Xcode项目的GitHub依赖管理器</a>
<a href="http://www.isaced.com/post-265.html">Cocoa 新的依赖管理工具：Carthage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nvm安装node后bash仍然提示找不到的问题]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti/"/>
    <updated>2015-11-20T19:57:05+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>一个月前，重做了系统后需要安装node.js来跑起我的测试服务器程序，那天用homebrew死活装不上，总是提示下载出错，后来查了下就用nvm安装，结果安装后后运行node提示找不到这个命令；用<strong>nvm which node</strong>命令查了下，貌似通过nvm安装的node在路径<strong>/Users/username/.nvm/versions/node/v4.2.1/bin/node</strong>下，而不是在/usr/local/bin目录下，所以提示找不到。</p>

<p>后来通过下面的命令解决了这个问题：</p>

<pre><code>ln -s /Users/username/.nvm/versions/node/v4.2.1/bin/node /usr/local/bin/node
</code></pre>

<p>实际就是创建了一个到<strong>/usr/local/bin/node</strong>的软连接   。</p>

<p>用homebrew直接安装的话没这个问题。</p>
]]></content>
  </entry>
  
</feed>
