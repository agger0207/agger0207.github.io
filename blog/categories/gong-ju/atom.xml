<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工具 | 穷小子Agger的技术博客]]></title>
  <link href="http://agger0207.github.io/blog/categories/gong-ju/atom.xml" rel="self"/>
  <link href="http://agger0207.github.io/"/>
  <updated>2016-01-01T18:23:04+08:00</updated>
  <id>http://agger0207.github.io/</id>
  <author>
    <name><![CDATA[Agger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何创建自己的私有Pod Spec Repo]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/ru-he-chuang-jian-zi-ji-de-si-you-pod-spec-repo/"/>
    <updated>2016-01-01T14:10:19+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/ru-he-chuang-jian-zi-ji-de-si-you-pod-spec-repo</id>
    <content type="html"><![CDATA[<p>晕，发现文章在公司写了没传到github上；假期结束后去公司发好了；其实很简单，直接看官网文章<a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a>就可以了，另外有一篇中文文章写得更细致点。</p>

<p>提一句，CocoaPods Spec Repo的核心也就是一个github仓库<a href="https://github.com/CocoaPods/Specs">CocoaPods/Specs</a>, 然后这里面的所有内容就是各个开源库提交过来的Specs信息，<code>pod setup</code>的时候会将这个仓库clone到本地；为什么我们经常说在国内，<code>pod update</code>的时候非常慢，主要就是因为需要将本地的spec repo和github上做一个同步，而这个repo由于里面的文件非常多，更新也多，所以以国内的网速，同步起来非常非常慢，我试过将这个仓库一次性全clone到本地，要一个多小时。。。。所以一般大家在<code>pod update</code>的时候会加上参数<code>--no-repo-update</code>避免重新去同步这个仓库。</p>

<p>而所谓的创建私有Pod Spec Repo或者说创建一个新的Repo镜像，本质都是维护一个github的仓库，这个仓库里面放的就是这些spec了</p>

<p>话说创建好自己的私有Pod Spec Repo后，添加原有的那些内部用的podspec的时候，无一例外都报错，囧。。。。看来得花时间好好review这些podspec啦 ^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github上Contributions丢失的问题]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/githubshang-contributionsdiu-shi-de-wen-ti/"/>
    <updated>2016-01-01T14:09:54+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/githubshang-contributionsdiu-shi-de-wen-ti</id>
    <content type="html"><![CDATA[<p>前几天无意中瞟了一眼自己的github, 虽然自己都怎么向github上提交代码，但是contributions明显不对，中间空了好几个月，再仔细看看，发现提交上去的作者都链接不到自己的profile, google一下答案就找到了，因为自己机器重做后忘记设置git 的user email了，而github是通过user email来对应到实际的用户的；解决这个问题一般通过命令</p>

<pre><code>$ git config --global user.email "xxxx@xxxx.com"
</code></pre>

<p>其中的email地址需要和自己github profile的email地址一样;</p>

<p>而如果希望不在commit中暴露自己的email地址的话，可以用如下命令</p>

<pre><code>$ git config --global user.email "username@users.noreply.github.com"
</code></pre>

<p>其中<code>username</code>是自己的github用户明名，这样既可以同自己的profile关联起来，自己在profile中将email地址不对外开放的话，别人也看到你的email地址。</p>

<p>但是<code>git config --global</code>这个命令是全局生效的，也就是所有git的提交都会使用这个email, 如果自己还使用了另外一个email提交代码，比如说一般公司内网都会搭建gitbucket之类，自己同时还在内网提交代码，那么所用的账户对应的email可能是不一样的，那么就需要对具体某个local repo来设置email了，命令如下：</p>

<pre><code>$ git config --local user.email "username@users.noreply.github.com"
</code></pre>

<p>这样就可以对当前的repo设置一个email, 在当前repo下所有commit都会和这个email关联起来，其实这样也挺麻烦的，按道理说应该可以配置得更加智能些，毕竟这些config信息都是存在配置文件上的，改天自己实践过后再来更新这篇文章吧！话说我发现我的某个分支好像又是存在问题的，commit的作者显示不正确，看来改天又要去检查下啦。。。。</p>

<p>参考资料:</p>

<ul>
<li><a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/">Why are my contributions not showing up on my profile?</a></li>
<li><a href="https://help.github.com/articles/keeping-your-email-address-private/">Keeping your email address private</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa新的依赖管理工具 Carthage]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage/"/>
    <updated>2015-11-27T14:27:51+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage</id>
    <content type="html"><![CDATA[<p>之前只知道使用git submodule和CocoaPods来做包的依赖管理，前段时间看一个开源库的时候，不记得是Mantle还是MagicRecord的时候发现ReadMe里面有介绍可以用Carthage来做包的依赖管理。</p>

<p>不过根据ReadMe中说明，只支持动态框架，所以只能用于iOS 8以及以后.</p>

<pre><code>Note that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).
</code></pre>

<p>github地址：</p>

<p><a href="https://github.com/Carthage/Carthage">https://github.com/Carthage/Carthage</a></p>

<p>由于自己主要还是在用Cocoapods和git submodule，所以还是推荐两篇文章自己去看吧，也算是给自己的一个备忘:</p>

<p><a href="http://www.infoq.com/cn/news/2015/05/carthage-dependency-manager">Carthage：Xcode项目的GitHub依赖管理器</a>
<a href="http://www.isaced.com/post-265.html">Cocoa 新的依赖管理工具：Carthage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nvm安装node后bash仍然提示找不到的问题]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti/"/>
    <updated>2015-11-20T19:57:05+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>一个月前，重做了系统后需要安装node.js来跑起我的测试服务器程序，那天用homebrew死活装不上，总是提示下载出错，后来查了下就用nvm安装，结果安装后后运行node提示找不到这个命令；用<strong>nvm which node</strong>命令查了下，貌似通过nvm安装的node在路径<strong>/Users/username/.nvm/versions/node/v4.2.1/bin/node</strong>下，而不是在/usr/local/bin目录下，所以提示找不到。</p>

<p>后来通过下面的命令解决了这个问题：</p>

<pre><code>ln -s /Users/username/.nvm/versions/node/v4.2.1/bin/node /usr/local/bin/node
</code></pre>

<p>实际就是创建了一个到<strong>/usr/local/bin/node</strong>的软连接   。</p>

<p>用homebrew直接安装的话没这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pods: Unable to Satisfy the Following Requirements]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/12/pods-unable-to-satisfy-the-following-requirements/"/>
    <updated>2015-11-12T18:06:36+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/12/pods-unable-to-satisfy-the-following-requirements</id>
    <content type="html"><![CDATA[<p>自己在AFNetworking基础上封装了个网络库给组里用，依赖于AFNetworking, podspec里依赖版本没有写死，如下</p>

<pre><code>s.dependency "AFNetworking", "~&gt; 2.5"
</code></pre>

<p>再加上我们为了避免每个人都pods update一下，所以都是把pods文件夹上传到了代码服务器，然后就看到小伙伴们的提交中经常带有pods文件夹下AFNetworking的改动，原因就是大家的第三方库的pods并不总是最新的，(一般在更新pods文件夹的时候，避免更新repo可以加快速度,基本上都会加上参数&ndash;no-repo-update), 所以AF的版本从2.6.0到2.6.2都有。</p>

<p>讨论后，索性就是写死固定的版本号啦；看了下，2.6.0肯定是要的，因为修正了很多Xcode 7里面会报warning的问题；2.6.2在2.6.0基础上差别不大，所以就写固定所依赖库的版本号：</p>

<pre><code>s.dependency "AFNetworking", "2.6.2"
</code></pre>

<p>完了在自己的Demo上运行的时候就会报错：<strong>&ldquo;Pods: Unable to satisfy the following requirements&rdquo;</strong></p>

<p>其实原因很简单，因为AFNetworking 2.6.0以上都不支持iOS 6.0了，而我的Demo工程里面Podfile中版本号仍然是6.0, 考虑到现在绝大部分应用都不需要支持6.0了，索性就将Demo和podspec的版本号全部改成iOS 7.0就解决问题啦。</p>

<p>话说，也有人在AFNetworking上报issue提到这个问题：^_^</p>

<p><a href="https://github.com/CocoaPods/CocoaPods/issues/4373">https://github.com/CocoaPods/CocoaPods/issues/4373</a></p>
]]></content>
  </entry>
  
</feed>
