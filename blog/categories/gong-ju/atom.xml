<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工具 | 穷小子Agger的技术博客]]></title>
  <link href="http://agger0207.github.io/blog/categories/gong-ju/atom.xml" rel="self"/>
  <link href="http://agger0207.github.io/"/>
  <updated>2015-11-30T19:23:57+08:00</updated>
  <id>http://agger0207.github.io/</id>
  <author>
    <name><![CDATA[Agger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocoa新的依赖管理工具 Carthage]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage/"/>
    <updated>2015-11-27T14:27:51+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/cocoaxin-de-yi-lai-guan-li-gong-ju-carthage</id>
    <content type="html"><![CDATA[<p>之前只知道使用git submodule和CocoaPods来做包的依赖管理，前段时间看一个开源库的时候，不记得是Mantle还是MagicRecord的时候发现ReadMe里面有介绍可以用Carthage来做包的依赖管理。</p>

<p>不过根据ReadMe中说明，只支持动态框架，所以只能用于iOS 8以及以后.</p>

<pre><code>Note that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).
</code></pre>

<p>github地址：</p>

<p><a href="https://github.com/Carthage/Carthage">https://github.com/Carthage/Carthage</a></p>

<p>由于自己主要还是在用Cocoapods和git submodule，所以还是推荐两篇文章自己去看吧，也算是给自己的一个备忘:</p>

<p><a href="http://www.infoq.com/cn/news/2015/05/carthage-dependency-manager">Carthage：Xcode项目的GitHub依赖管理器</a>
<a href="http://www.isaced.com/post-265.html">Cocoa 新的依赖管理工具：Carthage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nvm安装node后bash仍然提示找不到的问题]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti/"/>
    <updated>2015-11-20T19:57:05+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/20/nvman-zhuang-nodehou-bashreng-ran-ti-shi-zhao-bu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>一个月前，重做了系统后需要安装node.js来跑起我的测试服务器程序，那天用homebrew死活装不上，总是提示下载出错，后来查了下就用nvm安装，结果安装后后运行node提示找不到这个命令；用<strong>nvm which node</strong>命令查了下，貌似通过nvm安装的node在路径<strong>/Users/username/.nvm/versions/node/v4.2.1/bin/node</strong>下，而不是在/usr/local/bin目录下，所以提示找不到。</p>

<p>后来通过下面的命令解决了这个问题：</p>

<pre><code>ln -s /Users/username/.nvm/versions/node/v4.2.1/bin/node /usr/local/bin/node
</code></pre>

<p>实际就是创建了一个到<strong>/usr/local/bin/node</strong>的软连接   。</p>

<p>用homebrew直接安装的话没这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pods: Unable to Satisfy the Following Requirements]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/12/pods-unable-to-satisfy-the-following-requirements/"/>
    <updated>2015-11-12T18:06:36+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/12/pods-unable-to-satisfy-the-following-requirements</id>
    <content type="html"><![CDATA[<p>自己在AFNetworking基础上封装了个网络库给组里用，依赖于AFNetworking, podspec里依赖版本没有写死，如下</p>

<pre><code>s.dependency "AFNetworking", "~&gt; 2.5"
</code></pre>

<p>再加上我们为了避免每个人都pods update一下，所以都是把pods文件夹上传到了代码服务器，然后就看到小伙伴们的提交中经常带有pods文件夹下AFNetworking的改动，原因就是大家的第三方库的pods并不总是最新的，(一般在更新pods文件夹的时候，避免更新repo可以加快速度,基本上都会加上参数&ndash;no-repo-update), 所以AF的版本从2.6.0到2.6.2都有。</p>

<p>讨论后，索性就是写死固定的版本号啦；看了下，2.6.0肯定是要的，因为修正了很多Xcode 7里面会报warning的问题；2.6.2在2.6.0基础上差别不大，所以就写固定所依赖库的版本号：</p>

<pre><code>s.dependency "AFNetworking", "2.6.2"
</code></pre>

<p>完了在自己的Demo上运行的时候就会报错：<strong>&ldquo;Pods: Unable to satisfy the following requirements&rdquo;</strong></p>

<p>其实原因很简单，因为AFNetworking 2.6.0以上都不支持iOS 6.0了，而我的Demo工程里面Podfile中版本号仍然是6.0, 考虑到现在绝大部分应用都不需要支持6.0了，索性就将Demo和podspec的版本号全部改成iOS 7.0就解决问题啦。</p>

<p>话说，也有人在AFNetworking上报issue提到这个问题：^_^</p>

<p><a href="https://github.com/CocoaPods/CocoaPods/issues/4373">https://github.com/CocoaPods/CocoaPods/issues/4373</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RestKit测试服务器搭建]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/10/restkitce-shi-fu-wu-qi-da-jian/"/>
    <updated>2015-11-10T20:38:03+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/10/restkitce-shi-fu-wu-qi-da-jian</id>
    <content type="html"><![CDATA[<h2>用途</h2>

<p>RestKit 测试服务器可以用来支持RestKit的单元测试，服务器默认运行在本地，路径在RestKit/Tests/Server下；其对应的帮助文档为RestKit/Tests/README.md, 但其中部分已经过时且在安装过程中会遇到一些问题。本文档主要针对服务器的配置与启动列出实际的解决方案。</p>

<h2>一 在用户目录安装Ruby</h2>

<p>默认情况下，系统中已经安装了Ruby; 但如果直接使用系统的Ruby执行命令"gem install bundler"会报错，提示无权限。</p>

<pre><code>While executing gem ... (Gem::FilePermissionError)
You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
</code></pre>

<p>尽管使用命令"sudo gem install bundler"可以获得权限安装bundler, 但会影响系统自定义安装的Ruby. 故推荐在用户目录安装Ruby. 步骤如下：</p>

<h3>1 使用brew安装ruby</h3>

<pre><code>brew install ruby    
</code></pre>

<p>在这之前可以使用命令"ruby &ndash;version"查看系统安装的ruby版本或者使用命令"which ruby"查看系统安装的ruby路径.</p>

<p>Note: brew安装有的时候会过慢，可以参考<code>http://heepo.github.io/%E5%B7%A5%E5%85%B7/2015/08/05/Homebrew-Mirror-Links.html</code>提供的方式更换合适的镜像.</p>

<h3>2 修改环境变量</h3>

<p>到自己目录下的.profile 或者 .bashrc 或者  .bash_profile</p>

<pre><code>/Users/agger/.profile   
</code></pre>

<p>用emacs或是vim打开 （更改前请备份好这个文件，避免误操作）在文件的末尾加入</p>

<pre><code># for brew install
export PATH=/usr/local/bin:$PATH
</code></pre>

<p>然后重启终端，就可以用到了新的ruby了    . 此时执行which ruby会发现路径和系统安装的ruby路径不相同.</p>

<p>一点说明：实际操作中我机器上原本是没有这个.profile的，于是直接新建了这个文件并加入那段代码.</p>

<h2>二 安装bundler</h2>

<h3>1 执行如下命令安装bundler</h3>

<pre><code>gem install bundler
</code></pre>

<h3>2 执行如下命令查看bundler是否安装成功</h3>

<pre><code>gem list --local
</code></pre>

<h2>三 通过Bundle安装其他组件</h2>

<h3>1 修改gemfile</h3>

<p>在安装之前，需要修改RestKit目录下的gemfile; 将下面这行</p>

<pre><code>source "https://rubygems.org"
</code></pre>

<p>修改为：</p>

<pre><code>source "https://ruby.taobao.org/"
</code></pre>

<p>否则会不断提示安装步骤；</p>

<p>Note: 之前的地址<code>http://ruby.taobao.org</code>无法访问，需要更新为<code>https://ruby.taobao.org</code>.</p>

<h3>2 安装</h3>

<p>执行命令<code>bundle install</code>安装gemfile指定的组件.</p>

<h3>3 执行命令<code>bundle</code>查看使用的组件.</h3>

<h3>4 可能发生的错误与解决方法</h3>

<p>1 执行命令<code>bundle</code>时报错"Could not find rake-10.3.2 in any of the sources"
解决方法：bundle install可以自动安装上rake-10.3.2; 执行完毕后可以在gem list &ndash;local中查看rake对应版本是否可以安装上.</p>

<p>2 bundle install的时候报错：
An error occurred while installing i18n (0.7.0), and Bundler cannot continue.
Make sure that <code>gem install i18n -v '0.7.0'</code> succeeds before bundling.</p>

<p>运行<code>gem install i18n -v '0.7.0'</code>即可; 一般如果gemfile按照上面的步骤做过修改是不会报这个错误的.</p>

<p>3 报错：Make sure that <code>gem install nokogiri -v '1.6.6.2'</code> succeeds before bundling
解决方法：运行如下命令</p>

<pre><code>gem install nokogiri -- --use-system-libraries=true --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include/libxml2
</code></pre>

<p>Note: 请根据自己的系统版本信息调整上述路径，例如，当我的系统升级到最新的版本10.11后，上面SDK的路径就应该从<code>MacOSX10.10.sdk</code>调整为
<code>MacOSX10.11.sdk</code>.完成的命令如下：</p>

<pre><code>gem install nokogiri -- --use-system-libraries=true --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/libxml2
Building native extensions with: '--use-system-libraries=true --with-xml2-include=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/libxml2'
</code></pre>

<p>然后继续执行bundle install即可.
参考：
<a href="http://ruby.zigzo.com/2015/03/18/installing-nokogiri-on-yosemite/">http://ruby.zigzo.com/2015/03/18/installing-nokogiri-on-yosemite/</a></p>

<h2>四 运行RestKit Test Server</h2>

<p>按照RestKit原有的文档，执行命令<code>rake server</code>可以启动服务器；但实际操作中发现会报错，原因是server要求的rake版本是1.3.2; 而我系统上激活的rake版本为1.4.2; 这时换用如下命令可以正常启动服务器:</p>

<pre><code>bundle exec rake server
</code></pre>

<h2>五 检查测试服务器是否运行</h2>

<p>浏览器中输入：
<a href="http://localhost:4567/">http://localhost:4567/</a></p>

<h2>参考文档：</h2>

<p><a href="http://blog.csdn.net/maojudong/article/details/7920578">http://blog.csdn.net/maojudong/article/details/7920578</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac实用小工具 CheatSheet]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/10/macshi-yong-xiao-gong-ju-cheatsheet/"/>
    <updated>2015-11-10T20:18:49+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/10/macshi-yong-xiao-gong-ju-cheatsheet</id>
    <content type="html"><![CDATA[<p>CheatSheet是一个可以显示当前正在使用app的快捷键的小工具，使用起来相当方便；直接从官网下载安装即可，安装后，长按command键可以弹出当前程序下的快捷键列表，对于我这种懒得记那么多快捷键的人非常有用。</p>

<p>下图是就是通过CheatSheet显示的Mou的快捷键:</p>

<p><img src="/images/CheatSheet.png" alt="image" /></p>

<p>官网地址：<a href="http://www.cheatsheetapp.com/CheatSheet/">CheatSheet</a></p>
]]></content>
  </entry>
  
</feed>
