<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 经验技巧 | 穷小子Agger的技术博客]]></title>
  <link href="http://agger0207.github.io/blog/categories/jing-yan-ji-qiao/atom.xml" rel="self"/>
  <link href="http://agger0207.github.io/"/>
  <updated>2016-01-02T14:22:43+08:00</updated>
  <id>http://agger0207.github.io/</id>
  <author>
    <name><![CDATA[Agger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在两台机器上同时用octopress写博客的问题]]></title>
    <link href="http://agger0207.github.io/blog/2016/01/01/zai-liang-tai-ji-qi-shang-tong-shi-yong-octopressxie-bo-ke-de-wen-ti/"/>
    <updated>2016-01-01T13:37:15+08:00</updated>
    <id>http://agger0207.github.io/blog/2016/01/01/zai-liang-tai-ji-qi-shang-tong-shi-yong-octopressxie-bo-ke-de-wen-ti</id>
    <content type="html"><![CDATA[<p>问题描述:
之前是在晚上在公司机器上来发布文章，但是同时也会在自己家里写文章，我们知道，octopress日常操作的实际就是blog所在的git仓库的source分支，例如我自己的blog对应的仓库实际上就是<code>https://github.com/agger0207/agger0207.github.io</code>, 平时写好文章后提交到git上，保持同步就好了。</p>

<p>今天在家里执行<code>rake deploy</code>的时候就发现报错了；错误信息与解决过程看下面.</p>

<p>错误1:</p>

<pre><code>## Deploying branch to Github Pages 
## Pulling any updates from Github Pages 
cd _deploy
rake aborted!
Errno::ENOENT: No such file or directory @ dir_chdir - _deploy
</code></pre>

<p>提示是找不到<code>_deploy</code>文件夹，看了下，还真没有，感情自己一直没在家里的机器上deploy过，搜索了下，如果有不同的本地仓库的时候就会存在这种问题，执行如下命令，就会生成_deploy文件夹啦!</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>错误2：</p>

<p>继续<code>rake deploy</code>, 继续报错：</p>

<pre><code>On branch master
nothing to commit, working directory clean

## Pushing generated _deploy website
To https://github.com/agger0207/agger0207.github.io
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/agger0207/agger0207.github.io'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>错误提示是说无法向自己博客所在远程仓库的<code>master</code>分支push, 因为当前本地的版本没有更新到最新版本. 了解git的同学都知道，要push到远程分支，首先需要将最新的改动pull下来，否则不让提交的。而octopress实际发布的过程实际上就是会将本地的改动push到blog所在git仓库的master分支(也就是我们日常通过编写markdown文档的过程其实并不是直接去改动blog的呈现，而是在改动后，通过<code>rake generate</code>生成网页，然后deploy的时候将生成的页面信息push到远程的master分支上).</p>

<p>google了一下，原来<code>_deploy</code>文件夹下的内容就是从<code>master</code>分支下取下来的内容，大家可以看下，<code>_deploy</code>目录下的是不是正好和github上<code>master</code>分支一样呢？</p>

<p>执行命令:</p>

<pre><code>$ cd _deploy
$ ls -a 
</code></pre>

<p>可以看到结果：</p>

<pre><code>.       assets      favicon.png javascripts sitemap.xml
..      atom.xml    images      posts       stylesheets
.git        blog        index.html  robots.txt  
</code></pre>

<p>.git的存在证明了这就是一个本地的git仓库嘛；</p>

<p>剩下的就好办了，只需要与master同步即可：</p>

<pre><code>$ git pull origin master    
</code></pre>

<p>pull失败，提示有冲突，不要紧，执行下面的命令恢复到和master分支一样就可以了，反正这里面的内容都是自动生成的.</p>

<pre><code>$ git reset --hard origin/master
</code></pre>

<p>然后搞定，回到上一层目录，执行<code>rake deploy</code>就OK.</p>

<p>小结：
解决下来，发现这个问题其实还蛮有意思的；原来<code>_deploy</code>文件夹就是对应的git repo的master branch。其实octopress的这些操作核心就是ruby和git; 如果没有猜错，之前解决<code>_deploy</code>文件夹不存在时所执行的命令就是创建一个本地的仓库并且设置对应的remote url, 不过我对ruby不太熟，要不然可以研究下里面的rakefile确认一下。而octopress对于git仓库的处理就是，编辑的内容对应的是source branch, 而<code>_deploy</code>对应master branch, 和git submodule有点类似，只不过子文件夹下对应的remote repo是同一个repo的不同branch,  而git submodule一般都是不同的submodule放在不同的仓库下。</p>

<p>参考资料：</p>

<ul>
<li><a href="https://github.com/imathis/octopress/issues/334">No such file or directory - _deploy</a></li>
<li><a href="http://stackoverflow.com/questions/19619280/octopress-pushing-error-to-github">Octopress pushing error to GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 7调试选项 Address Sanitizer]]></title>
    <link href="http://agger0207.github.io/blog/2015/12/15/xcode-7diao-shi-xuan-xiang-address-sanitizer/"/>
    <updated>2015-12-15T14:21:58+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/12/15/xcode-7diao-shi-xuan-xiang-address-sanitizer</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日常积累的开发技巧（一）]]></title>
    <link href="http://agger0207.github.io/blog/2015/12/12/ri-chang-ji-lei-de-kai-fa-ji-qiao-(%5B%3F%5D-)/"/>
    <updated>2015-12-12T14:35:06+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/12/12/ri-chang-ji-lei-de-kai-fa-ji-qiao-([?]-)</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode Error: Use of undeclared type]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/29/xcode-error-use-of-undeclared-type/"/>
    <updated>2015-11-29T14:23:53+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/29/xcode-error-use-of-undeclared-type</id>
    <content type="html"><![CDATA[<p>前几天写swift + watchOS 的程序时，编译遇到个错误，提示"Use of undeclard type"; 但实际上是系统类型，而且也正确import了module;后来仔细看了下，发现原来是加错了target导致的；修改成为正确的Target之后问题解决：</p>

<p>如下图：</p>

<p><img src="/images/XcodeTarget.jpg" alt="img" /></p>

<p>出错的时候，所有Target是全选的。</p>

<p>我后来新建了个文件试下，默认所有的Target都是选中的，当时没注意，一路Next下去了；后来突然想起前几天好像装了个Xcode插件叫做<code>AllTargets</code>的，这个插件就是当添加文件到工程的时候会自动帮助选上所有的Target，后来想想，这个功能没啥用，赶紧将这个插件删除了，然后就不会有这个问题啦:)</p>

<p><code>AllTargets</code>如下图所示：</p>

<p><img src="/images/XcodeAllTargets.jpg" alt="img" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作经历回忆 之 快速性能改进]]></title>
    <link href="http://agger0207.github.io/blog/2015/11/27/gong-zuo-jing-li-hui-yi-zhi-kuai-su-xing-neng-gai-jin/"/>
    <updated>2015-11-27T14:37:29+08:00</updated>
    <id>http://agger0207.github.io/blog/2015/11/27/gong-zuo-jing-li-hui-yi-zhi-kuai-su-xing-neng-gai-jin</id>
    <content type="html"><![CDATA[<p>最近唐巧老师在他的个人博客上开始普及算法相关知识，其中提到熟悉算法和数据结构知识能够帮助我们更好的评估性能问题所在，能够认识到问题的规模对于实际性能的影响，并且举了一个由于问题的规模太小根本就不需要做算法改进的例子，这个我倒是有些体会，也见过一些将代码写得难看加不安全仅仅自以为可以提升性能的做法（比如去掉空指针的判断以为减少了性能开销，其实性能没有节省多少但是带来了crash的风险）；加上自己以前也做过一些性能优化方面的工作，能够很好的认识到，性能优化并不等同于算法优化，所以想回忆一些之前做的一些性能改进的实例，也算是对自己过往工作的一个总结。</p>

<p>由于我其实一直是做客户端相关的工作，所以涉及到算法比较少，这些优化经验大部分也和算法优化关系不大, 或者说，这是在介绍自己如何在不改进算法的基础上做的一些性能改进，其实想法都比较简单。</p>

<h2>一 多线程改进数据备份还原性能</h2>

<p>问题描述：做磁盘/文件数据备份，性能慢<br/>
一般误解：由于一般过程是，读取数据&ndash;>压缩&ndash;>写入目标文件；所以想到可能是改进压缩算法.</p>

<p>实际解决：性能太慢其实仅仅是因为所有的操作都是在一条线程中完成的，即使不压缩，也足够慢呀；所以改进策略就是采用多线程的解决方案，读，压缩，并行即可；无论对于文件备份还是磁盘备份都适合；<br/>
进一步优化：<br/>
1）多线程压缩；并行后压缩成为真正的瓶颈所在，那么这个时候就可以提高压缩性能了；而比换一个压缩算法更好的方式是，同时用多个线程进行的数据压缩； <br/>
2）对部分文件避免压缩：如果是做文件备份，对于图片、视频数据，压缩得不偿失，压缩率低，压缩时间长，不压缩就好了;<br/>
3）读写线程改善；对同一块磁盘的读写并行，不仅不会提高性能，反而会降低性能；而对不同磁盘的读写并行，是可以提高性能的。</p>

<h2>二 遍历磁盘文件树的性能改进</h2>

<p>问题描述：做某个分区的文件备份，需要建立分区的文件树，然后看这些文件是否需要备份，并且需要和已备份的文件树比较，来支持增量备份等一系列的功能；</p>

<p>改进方案：<br/>
1 递归改非递归；<br/>
如果使用者不分区，那么一个分区里面十几万的文件很正常，这个时候递归遍历并且比较的时候，函数调用会有很多额外的开销，所以仅仅是递归改非递归就可以大大提高这部分性能；<br/>
2 避免多次遍历与多次比较；（这个其实是原来的代码写得有问题^_^)<br/>
3 利用文件系统的特性：<br/>
Windows上有个很火的工具，叫做Everything, 号称是速度最快的文件名搜索工具；其实就是因为在NTFS系统下，所有文件目录和文件的meta信息都存放在一个叫做MFT文件里面，只需要获取到这里面的信息，就可以快速获取到NTFS分区里面的文件树信息了，是不是快了很多？</p>

<p>还有一些，时间久远，不太想得起来了，后面想起来了再慢慢补充 :)</p>

<h2>三 随机存取备份文件改进文件提取性能</h2>

<p>问题描述：需要从磁盘备份数据里面找到某个文件然后还原出来。。。<br/>
之前的版本：从备份文件里面展示出所有文件大概需要一个多小时，然后找到这个文件后还原，大概需要两个小时，而且内存和CPU都占满了；<br/>
原因：之前是不支持随机存取，然后要展示所有的文件，差不多需要把整个磁盘备份解压缩一遍，然后找到文件还原的时候需要解压缩两遍，囧。。。</p>

<p>改进：以NTFS文件系统为例啦，有个MFT(Master File Table)文件，它里面每一项呢，都代表一个文件，然后MFT呢，本身也是一个特殊的文件，其实大家可以把它想象成为一本书的目录啦，只不过有个特殊的是，这个目录(MFT)的内容，并不是固定在某一个区域里的，而是可能分散在分区的任何一处的。所以之前的做法相当于是，先把整本书翻了一遍，然后将目录信息取出来了；然后找到某个文件的时候呢，又把整本书翻了一遍找到某个文件对应的目录信息，然后呢，再把整本书翻了一遍取到这个文件的信息。
忘了说了，NTFS文件系统的特殊性还包括，这个文件的后半部分在磁盘上的位置可能更前，这样的话，可能还得从头把这本书翻一遍。</p>

<p>解决方案：其实就是允许随机存取备份生成的文件；对备份前的磁盘分块，通过改进文件格式，在已备份信息中记录类似MFT的信息，例如，所有待备份的都以2MB的大小分块，那么只要能够从备份生成的文件中快速找到要还原的文件是分布在哪些2MB块里面，就可以找到这些信息在备份文件里的偏移量，只需要解压缩这部分数据就可以了。比如说，先取目录信息(MFT)的时候，只需要取这个MFT文件对应的offset的内容进行解压缩，甚至可以做到，只取第一层目录；然后每个文件都能够找到它的对应内容处在备份文件的哪一块，再也不需要从头开始解压缩了。</p>

<p>其实，上面这些基本上都不需要什么特殊的算法知识，很多时候都是具体分析瓶颈在那里，尤其是在数据规模大的时候；而常见的性能改进方法，无非就是多线程、缓存、随机存取等等。</p>

<p>待续&hellip;.</p>
]]></content>
  </entry>
  
</feed>
