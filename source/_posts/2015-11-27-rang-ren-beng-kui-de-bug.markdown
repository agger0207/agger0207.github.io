---
layout: post
title: "让人崩溃的bug"
date: 2015-11-27 14:36:39 +0800
comments: true
categories: 经验总结
---
## 一 iOS使用不规范造成的首页白屏

WebView页面被遮挡，然后被Remove掉的时候，页面内容没有渲染出来

## 二 人家的bug

H5页面的bug, iOS开发工程师来帮忙调, 最怕的是Android还没问题(其实是Andorid也有问题，负负得正)

## 三 人家的bug: Andorid内存溢出 

## 四 花费时间最长的两个bug
1 磁盘还原后某个文件内容不正确
2 磁盘还原后系统无法启动

## 五 多线程
多线程永远都是最头痛的问题, 死锁，Crash等等

## 六 按键精灵

## 七 无法重现

## 八 客户报过来的
有dump就不怕:)

之前CodeProject上有文章介绍在VC 6.0下如何根据crash日志定位到具体的代码行，在VS2010下其实也可用，不过有的时候对应不到代码行，只能到函数，这个时候，函数写的短小精悍的好处就出来了：）

## 九 内存泄漏

## 十 已经改好了



总结：代码Review, 静态代码分析，XCode Instruments能够很好的避免bug的出现;

待完善 （年纪大了，很多都已经不记得了，不过iOS相对来说更简单一些，至少多线程的问题少很多；代码量相对比较少也可以通过代码比对的方式来修正错误；一般如果是自己团队开发造成的bug都可以通过规范代码的方式来避免，除非crash在系统控件内部且无法重现）

吐槽：很多开发同学只要不是自己负责代码的bug就一概忽略；自己重现不了的bug一概忽略；其实，很多稍微调试一下或者稍微看看代码就能够知道问题所在；或者搜索下错误信息；或者搜索下最近代码改动；或者看下相关功能的代码；绝大部分都能够定位到原因；少数不能定位到具体原因，也能够限制在少部分代码块中，而这部分代码块如果写法规范点，基本上就没啥问题了。
当然，我也遇到过不靠谱的测试，由于网络问题的原因，中国这边无法测试，然后对方测试后给出个bug, 就只有一个出错界面，操作步骤和日志也没有，而且还经常把记录好的错误日志清除掉，再也重现不了。。。。

当然，不排除部分问题确实很难查。对于出现的问题，我总记得之前的架构师说过的一句话：“Let me debug it !”

